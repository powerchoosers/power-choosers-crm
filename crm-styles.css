/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    color: #1e293b;
    height: 100vh;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

/* Top Navigation Bar - Updated with properly centered icons */
.top-nav {
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
    padding: 6px 0;
    box-shadow: 0 8px 32px rgba(0,0,0,.08);
    border-bottom: 1px solid rgba(30,90,168,.1);
    z-index: 1000;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
}

.nav-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 15px;
}

.nav-left-title h1 {
    font-size: 1.6rem;
    font-weight: 800;
    color: #1A438D;
    margin: 0;
}

.nav-icons-center {
    display: flex;
    justify-content: flex-end;
    flex-grow: 1;
    gap: 25px;
}

/* Updated app buttons - properly centered icons */
.app-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 60px;
    height: 60px;
    border-radius: 12px;
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
    box-shadow: 0 4px 16px rgba(0,0,0,.06);
    border: 1px solid rgba(30,90,168,.1);
    cursor: pointer;
    transition: all .3s ease;
    position: relative;
    text-decoration: none;
    padding: 6px;
}

.app-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 32px rgba(0,0,0,.12);
}

.app-button.active {
    background: linear-gradient(145deg, #1A438D 0%, #2563EB 100%);
    color: white;
}

.app-button.active .app-icon {
    filter: brightness(0) invert(1);
    background: rgba(255,255,255,0.15);
}

.app-button.active .app-label {
    color: white;
}

.app-button.active .app-icon-svg {
    color: white;
}

/* Properly centered icon styles */
.app-icon {
    width: 24px;
    height: 24px;
    border-radius: 6px;
    margin: 0 0 4px 0;
    object-fit: contain;
    background: rgba(107, 114, 128, 0.1);
    padding: 4px;
    transition: all .3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.app-icon-svg {
    width: 24px;
    height: 24px;
    color: #374151;
    margin: 0 0 4px 0;
    transition: color .3s ease;
    background: rgba(107, 114, 128, 0.1);
    border-radius: 6px;
    padding: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.app-label {
    font-size: .55rem;
    font-weight: 600;
    color: #374151;
    text-align: center;
    line-height: 1.1;
    white-space: nowrap;
    margin-top: auto;
}

/* Search Bar - Reduced top positioning */
.search-bar {
    position: fixed;
    top: 72px;
    left: 0;
    right: 0;
    background: white;
    border-bottom: 2px solid #1A438D;
    box-shadow: 0 8px 32px rgba(26,67,141,.15);
    padding: 0;
    height: 0;
    overflow: hidden;
    transition: all .3s ease;
    z-index: 500;
}
.search-bar.active {
    height: 70px;
    padding: 15px;
}
.search-container {
    max-width: 1000px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    gap: 15px;
}
.search-label {
    font-size: 1rem;
    font-weight: 600;
    color: #1A438D;
    min-width: 140px;
}
.search-input {
    flex: 2;
    padding: 10px 14px;
    font-size: 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    background: white;
    color: #1e293b;
}
.search-input.city, .search-input.state, .search-input.location {
    flex: 1;
}
.search-input:focus {
    outline: none;
    border-color: #1A438D;
}
.search-actions {
    display: flex;
    gap: 8px;
}
.search-btn {
    background: #1A438D;
    color: white;
    border: none;
    padding: 8px 14px;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
}
.search-btn.close {
    background: #6b7280;
    padding: 8px 10px;
}

/* Main Container - Reduced top margin */
.main-container {
    margin-top: 80px;
    padding: 15px;
    flex-grow: 1;
    overflow-y: auto;
    height: calc(100vh - 80px);
}

.main-container.search-active {
    margin-top: 142px;
    height: calc(100vh - 142px);
}

/* View Management */
.view-container {
    display: none;
    max-width: 1400px;
    margin: 0 auto;
}

.view-container.active {
    display: block;
}

.view-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 0 10px;
}

.view-header h2 {
    font-size: 2rem;
    font-weight: 700;
    color: #1A438D;
}

/* Dashboard Layout - Adjusted height */
.dashboard-layout {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 30px;
    height: calc(100vh - 120px);
}

.dashboard-main {
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow-y: auto;
    padding-right: 8px;
    margin-right: -8px;
}

.dashboard-main::-webkit-scrollbar {width: 8px;}
.dashboard-main::-webkit-scrollbar-track {background: #f1f5f9; border-radius: 4px;}
.dashboard-main::-webkit-scrollbar-thumb {background: #1A438D; border-radius: 4px;}

.dashboard-sidebar {
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow-y: auto;
    padding-right: 8px;
    margin-right: -8px;
}

.dashboard-sidebar::-webkit-scrollbar {width: 8px;}
.dashboard-sidebar::-webkit-scrollbar-track {background: #f1f5f9; border-radius: 4px;}
.dashboard-sidebar::-webkit-scrollbar-thumb {background: #1A438D; border-radius: 4px;}

/* Account Detail Layout - Adjusted height */
.account-detail-layout {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 30px;
    height: calc(100vh - 120px);
}

.account-detail-main {
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow-y: auto;
    padding-right: 8px;
    margin-right: -8px;
}

.account-detail-main::-webkit-scrollbar {width: 8px;}
.account-detail-main::-webkit-scrollbar-track {background: #f1f5f9; border-radius: 4px;}
.account-detail-main::-webkit-scrollbar-thumb {background: #1A438D; border-radius: 4px;}

.account-detail-sidebar {
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow-y: auto;
    padding-right: 8px;
    margin-right: -8px;
}

.account-detail-sidebar::-webkit-scrollbar {width: 8px;}
.account-detail-sidebar::-webkit-scrollbar-track {background: #f1f5f9; border-radius: 4px;}
.account-detail-sidebar::-webkit-scrollbar-thumb {background: #1A438D; border-radius: 4px;}

/* Cards */
.crm-card {
    background: white;
    border-radius: 16px;
    padding: 20px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, .06);
    border: 1px solid rgba(30, 90, 168, .1);
}

.card-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: #1A438D;
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    gap: 8px;
}

/* Stats Grid */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 12px;
    margin-bottom: 15px;
}

.stat-card {
    background: linear-gradient(135deg, #fef7ff 0%, #f3e8ff 100%);
    padding: 14px;
    border-radius: 12px;
    text-align: center;
    border: 1px solid #c084fc;
}

.stat-number {
    font-size: 1.6rem;
    font-weight: 800;
    color: #7c3aed;
    display: block;
}

.stat-label {
    font-size: .75rem;
    color: #6b21a8;
    font-weight: 600;
}

/* Grids */
.accounts-grid, .contacts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
}

.account-card, .contact-card {
    background: white;
    border-radius: 16px;
    padding: 20px;
    box-shadow: 0 8px 24px rgba(0,0,0,.06);
    border: 1px solid rgba(30,90,168,.1);
    cursor: pointer;
    transition: all .3s ease;
}

.account-card:hover, .contact-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 32px rgba(0,0,0,.12);
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 16px;
}

.card-name {
    font-size: 1.2rem;
    font-weight: 700;
    color: #1A438D;
    margin-bottom: 4px;
}

.card-subtitle {
    font-size: .9rem;
    color: #64748b;
}

.card-actions {
    display: flex;
    gap: 8px;
}

.icon-btn {
    background: transparent;
    border: none;
    padding: 8px;
    border-radius: 6px;
    cursor: pointer;
    transition: all .3s ease;
    color: #6b7280;
}

.icon-btn:hover {
    background: rgba(107, 114, 128, .1);
    color: #374151;
}

/* New Add Notes Button Styling */
.add-notes-btn {
    background: linear-gradient(135deg, #1A438D 0%, #2563EB 100%);
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    font-size: .9rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all .3s ease;
    box-shadow: 0 4px 16px rgba(26,67,141,.2);
}

.add-notes-btn:hover {
    background: linear-gradient(135deg, #153775 0%, #1D4ED8 100%);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(26,67,141,.3);
}

.add-notes-btn svg {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
}

/* Modals */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, .5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    opacity: 0;
    visibility: hidden;
    transition: all .3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: white;
    border-radius: 20px;
    padding: 0;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px rgba(0,0,0,.08);
    border: 1px solid rgba(30,90,168,.1);
    transform: scale(.9);
    transition: transform .3s ease;
}

.modal-overlay.active .modal-content {
    transform: scale(1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 24px 24px 0 24px;
    margin-bottom: 24px;
}

.modal-header h3 {
    font-size: 1.3rem;
    font-weight: 700;
    color: #1A438D;
}

.close-btn {
    background: transparent;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #6b7280;
    padding: 4px;
    border-radius: 4px;
    transition: color .3s ease;
}

.close-btn:hover {
    color: #374151;
}

/* Forms */
form {
    padding: 0 24px 24px 24px;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin-bottom: 16px;
}

.form-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 16px;
}

.form-group label {
    display: block;
    font-size: .85rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 4px;
}

.form-group input,
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: .9rem;
    color: #1e293b;
    transition: border-color .3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: #1A438D;
}

.form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 24px;
    padding-top: 24px;
    border-top: 1px solid #e2e8f0;
}

/* Account Detail Specific */
#account-info-display {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
}

.info-field {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border-left: 4px solid #F7921F;
    padding: 14px;
    border-radius: 0 8px 8px 0;
}

.info-field-label {
    font-size: .8rem;
    font-weight: 600;
    color: #6b7280;
    margin-bottom: 4px;
}

.info-field-value {
    font-size: .9rem;
    color: #1e293b;
    font-weight: 500;
}

.contact-list-item {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border-left: 4px solid #F7921F;
    padding: 14px;
    margin-bottom: 10px;
    border-radius: 0 8px 8px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.contact-info {
    display: flex;
    flex-direction: column;
}

.contact-name {
    font-weight: 600;
    color: #1A438D;
    font-size: 1rem;
    margin-bottom: 4px;
}

.contact-title {
    font-size: .85rem;
    color: #64748b;
}

/* Activities */
.activity-item {
    border-bottom: 1px solid #e2e8f0;
    padding-bottom: 14px;
    margin-bottom: 14px;
}

.activity-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
}

.activity-title {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 6px;
    font-size: .9rem;
    line-height: 1.4;
}

.activity-content {
    color: #64748b;
    font-size: .8rem;
    line-height: 1.4;
    margin-bottom: 6px;
}

.activity-date {
    color: #64748b;
    font-size: .8rem;
    line-height: 1.4;
    margin-bottom: 6px;
}

/* Sidebar specific styles */
#account-note-input {
    width: 100%;
    height: 150px;
    padding: 10px;
    background: white;
    color: #1e293b;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-family: inherit;
    font-size: .85rem;
    line-height: 1.4;
    resize: vertical;
    margin-bottom: 10px;
    box-sizing: border-box;
}

#energy-contract-display {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

/* Empty States */
.empty-state {
    text-align: center;
    color: #9ca3af;
    font-style: italic;
    padding: 40px 20px;
    font-size: .9rem;
}

/* Loading Overlay */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, .8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3000;
    opacity: 0;
    visibility: hidden;
    transition: all .3s ease;
}

.loading-overlay.active {
    opacity: 1;
    visibility: visible;
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e2e8f0;
    border-top: 4px solid #1A438D;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Toast Notifications */
.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 4000;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.toast {
    background: white;
    padding: 16px 20px;
    border-radius: 8px;
    box-shadow: 0 8px 24px rgba(0,0,0,.12);
    border-left: 4px solid #22c55e;
    min-width: 300px;
    transform: translateX(400px);
    transition: transform .3s ease;
    display: flex;
    align-items: center;
    gap: 12px;
}

.toast.show {
    transform: translateX(0);
}

.toast.error {
    border-left-color: #ef4444;
}

.toast.warning {
    border-left-color: #f59e0b;
}

.toast-message {
    font-size: .9rem;
    color: #1e293b;
    font-weight: 500;
}

/* CALLING HUB STYLES - Integrated */
.container {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 20px;
    height: calc(100vh - 120px);
    max-width: 1400px;
    margin: 0 auto;
}

.main-content {
    background: white;
    border-radius: 16px;
    padding: 20px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, .06);
    border: 1px solid rgba(30, 90, 168, .1);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    overflow-y: auto;
}

.script-display {
    font-size: 1.1rem;
    line-height: 1.6;
    padding: 20px;
    background: #f8fafc;
    border-radius: 12px;
    margin-bottom: 20px;
    min-height: 200px;
    border-left: 4px solid #e2e8f0;
    flex-grow: 1;
    overflow-y: auto;
}

.script-display.mood-neutral {
    border-left-color: #6b7280;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
}

.script-display.mood-positive {
    border-left-color: #22c55e;
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
}

.script-display.mood-challenging {
    border-left-color: #f59e0b;
    background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
}

.script-display.mood-unsure {
    border-left-color: #8b5cf6;
    background: linear-gradient(135deg, #faf5ff 0%, #f3e8ff 100%);
}

.pause {
    color: #6b7280;
    font-style: italic;
}

.emphasis {
    font-weight: 600;
    color: #1A438D;
}

.metric {
    font-weight: 700;
    color: #dc2626;
}

.responses-grid {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 20px;
}

.response-btn {
    background: linear-gradient(135deg, #1A438D 0%, #2563EB 100%);
    color: white;
    border: none;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: .9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all .3s ease;
    text-align: left;
    box-shadow: 0 4px 16px rgba(26,67,141,.2);
}

.response-btn:hover {
    background: linear-gradient(135deg, #153775 0%, #1D4ED8 100%);
    transform: translateY(-2px);
}

.dial-button {
    background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
    color: white;
    border: none;
    padding: 16px 24px;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    transition: all .3s ease;
    display: flex;
    align-items: center;
    gap: 12px;
    justify-content: center;
    box-shadow: 0 8px 24px rgba(34,197,94,.25);
}

.dial-button:hover {
    background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
    transform: translateY(-3px);
    box-shadow: 0 12px 32px rgba(34,197,94,.35);
}

.dial-button svg {
    width: 20px;
    height: 20px;
}

.nav-buttons {
    display: flex;
    gap: 12px;
    justify-content: center;
}

.nav-btn {
    background: #6b7280;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 8px;
    font-size: .9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all .3s ease;
}

.nav-btn:hover:not(:disabled) {
    background: #4b5563;
    transform: translateY(-2px);
}

.nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.sidebar {
    display: flex;
    flex-direction: column;
    gap: 15px;
    overflow-y: auto;
    padding-right: 8px;
    margin-right: -8px;
}

.sidebar::-webkit-scrollbar {width: 8px;}
.sidebar::-webkit-scrollbar-track {background: #f1f5f9; border-radius: 4px;}
.sidebar::-webkit-scrollbar-thumb {background: #1A438D; border-radius: 4px;}

.sidebar-card {
    background: white;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, .06);
    border: 1px solid rgba(30, 90, 168, .1);
}

.sidebar-title {
    font-size: 1rem;
    font-weight: 700;
    color: #1A438D;
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    gap: 6px;
}

.input-group {
    margin-bottom: 12px;
}

.input-group label {
    display: block;
    font-size: .8rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 4px;
}

.input-group input {
    width: 100%;
    padding: 8px 10px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: .85rem;
    color: #1e293b;
    transition: border-color .3s ease;
}

.input-group input:focus {
    outline: none;
    border-color: #1A438D;
}

#call-notes {
    width: 100%;
    height: 200px;
    padding: 10px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-family: inherit;
    font-size: .8rem;
    line-height: 1.4;
    resize: vertical;
    color: #1e293b;
}

#call-notes:focus {
    outline: none;
    border-color: #1A438D;
}

#copy-status {
    font-size: .8rem;
    color: #22c55e;
    opacity: 0;
    transition: opacity .3s ease;
    text-align: center;
    margin-top: 8px;
}

.tip-item {
    padding: 8px 0;
    border-bottom: 1px solid #f1f5f9;
    font-size: .8rem;
    line-height: 1.4;
    color: #4b5563;
}

.tip-item:last-child {
    border-bottom: none;
}

.tip-item strong {
    color: #1A438D;
    font-weight: 600;
}

.stat-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
    margin-bottom: 12px;
}

.stat-card {
    background: linear-gradient(135deg, #fef7ff 0%, #f3e8ff 100%);
    padding: 10px;
    border-radius: 8px;
    text-align: center;
    border: 1px solid #c084fc;
}

.stat-number {
    font-size: 1.2rem;
    font-weight: 800;
    color: #7c3aed;
    display: block;
    line-height: 1.2;
}

.stat-label {
    font-size: .65rem;
    color: #6b21a8;
    font-weight: 600;
    line-height: 1.2;
}

.news-item {
    padding: 12px 0;
    border-bottom: 1px solid #f1f5f9;
}

.news-item:last-child {
    border-bottom: none;
}

.news-title {
    font-size: .85rem;
    font-weight: 600;
    color: #1A438D;
    margin-bottom: 6px;
    line-height: 1.3;
}

.news-summary {
    font-size: .75rem;
    color: #4b5563;
    line-height: 1.4;
    margin-bottom: 8px;
}

.news-talking-point {
    font-size: .75rem;
    color: #059669;
    line-height: 1.4;
    font-style: italic;
    background: rgba(5, 150, 105, 0.05);
    padding: 6px 8px;
    border-radius: 4px;
    border-left: 2px solid #059669;
}

/* Responsive Design */
@media (max-width: 1200px) {
    .dashboard-layout,
    .account-detail-layout,
    .container {
        grid-template-columns: 1fr;
        gap: 20px;
        height: auto;
        padding: 0;
        min-height: calc(100vh - 100px);
        overflow: visible;
    }
    
    .dashboard-sidebar,
    .account-detail-sidebar,
    .sidebar {
        flex-direction: row;
        overflow-x: auto;
        max-height: none;
        padding-bottom: 10px;
        padding-right: 0;
        margin-right: 0;
    }
    
    .dashboard-sidebar .crm-card,
    .account-detail-sidebar .crm-card,
    .sidebar .sidebar-card {
        min-width: 300px;
        flex-shrink: 0;
    }
    
    .main-container {
        height: auto;
        min-height: calc(100vh - 80px);
        padding: 15px;
    }
    
    .nav-container {gap: 20px;}
    .app-button {width: 55px; height: 55px;}
    .app-icon, .app-icon-svg {width: 20px; height: 20px;}
    .app-label {font-size: .5rem;}
    .nav-icons-center {gap: 18px;}
    .search-bar {top: 67px;}
    .search-bar.active {height: 60px; padding: 12px;}
    .search-label {min-width: 120px;}
}

@media (max-width: 768px) {
    .nav-container {
        gap: 12px;
        padding: 0 15px;
    }
    
    .app-button {
        width: 50px;
        height: 50px;
    }
    
    .app-icon,
    .app-icon-svg {
        width: 18px;
        height: 18px;
    }
    
    .app-label {
        font-size: .45rem;
    }
    
    .nav-icons-center {
        gap: 15px;
    }
    
    .main-container {
        padding: 12px;
        margin-top: 65px;
    }
    
    .main-container.search-active {
        margin-top: 120px;
    }
    
    .view-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .view-header h2 {
        font-size: 1.6rem;
    }
    
    .accounts-grid,
    .contacts-grid {
        grid-template-columns: 1fr;
    }
    
    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
    }
    
    .form-row {
        grid-template-columns: 1fr;
        gap: 0;
    }
    
    .modal-content {
        width: 95%;
        margin: 20px;
    }
    
    .dashboard-sidebar,
    .account-detail-sidebar,
    .sidebar {
        flex-direction: column;
        overflow-x: visible;
        overflow-y: auto;
        max-height: 50vh;
    }
    
    .dashboard-sidebar .crm-card,
    .account-detail-sidebar .crm-card,
    .sidebar .sidebar-card {
        min-width: auto;
    }
    
    #account-info-display {
        grid-template-columns: 1fr;
    }
    
    .top-nav {padding: 8px 0;}
    .search-bar {top: 57px;}
    .search-bar.active {height: 50px; padding: 10px;}
}

@media (max-width: 480px) {
    .nav-container {
        gap: 8px;
        padding: 0 10px;
        justify-content: space-around;
    }
    
    .app-button {
        width: 45px;
        height: 45px;
    }
    
    .app-icon,
    .app-icon-svg {
        width: 16px;
        height: 16px;
    }
    
    .app-label {
        font-size: .4rem;
        line-height: 1.1;
    }
    
    .nav-icons-center {
        gap: 10px;
    }
    
    .main-container {
        padding: 10px;
        margin-top: 55px;
    }
    
    .main-container.search-active {
        margin-top: 105px;
    }
    
    .crm-card, .sidebar-card {
        padding: 14px;
    }
    
    .card-title, .sidebar-title {
        font-size: 1.1rem;
    }
    
    .view-header h2 {
        font-size: 1.4rem;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
        gap: 10px;
    }
    
    .stat-number {
        font-size: 1.4rem;
    }
    
    .toast {
        min-width: 250px;
        margin: 0 10px;
    }
    
    .toast-container {
        right: 10px;
        left: 10px;
    }
    
    .top-nav {padding: 6px 0;}
    .search-bar {top: 47px;}
    .search-bar.active {height: 45px; padding: 8px;}
    .nav-left-title h1 {font-size: 1.4rem;}
}
}
{
type: uploaded file
fileName: firebase-config.js
fullText:
// Universal Firebase Configuration
// Works for both CRM Dashboard and Calling Hub

// Your Firebase project configuration
const firebaseConfig = {
    apiKey: "AIzaSyBKg28LJZgyI3J--I8mnQXOLGN5351tfaE",
    authDomain: "power-choosers-crm.firebaseapp.com",
    projectId: "power-choosers-crm",
    storageBucket: "power-choosers-crm.firebasestorage.app",
    messagingSenderId: "792458658491",
    appId: "1:792458658491:web:a197a4a8ce7a860cfa1f9e",
    measurementId: "G-XEC3BFHJHW"
};

// Initialize Firebase only if not already initialized
let app;
let db;

// Check if we're in a Firebase v9 environment (CRM) or v8 environment (Calling Hub)
if (typeof firebase !== 'undefined') {
    // Firebase v8 (script tags) - for Calling Hub
    if (!firebase.apps.length) {
        app = firebase.initializeApp(firebaseConfig);
    } else {
        app = firebase.app();
    }
    db = firebase.firestore();

    // Export Firebase functions for v8
    window.FirebaseDB = {
        db: db,
        doc: function(db, collection, id) {
            return db.collection(collection).doc(id);
        },
        setDoc: function(docRef, data) {
            return docRef.set(data);
        },
        getDoc: function(docRef) {
            return docRef.get();
        },
        getDocs: function(query) {
            return query.get();
        },
        collection: function(db, path) {
            return db.collection(path);
        },
        query: function(collection, ...constraints) {
            let query = collection;
            constraints.forEach(constraint => {
                if (constraint && constraint.type === 'orderBy') {
                    query = query.orderBy(constraint.field, constraint.direction);
                } else if (constraint && constraint.type === 'limit') {
                    query = query.limit(constraint.limit);
                } else if (constraint && constraint.type === 'where') {
                    query = query.where(constraint.field, constraint.op, constraint.value);
                }
            });
            return query;
        },
        orderBy: function(field, direction = 'asc') {
            return { type: 'orderBy', field, direction };
        },
        limit: function(limit) {
            return { type: 'limit', limit };
        },
        serverTimestamp: firebase.firestore.FieldValue.serverTimestamp,
        updateDoc: function(docRef, data) {
            return docRef.update(data);
        },
        deleteDoc: function(docRef) {
            return docRef.delete();
        },
        arrayUnion: firebase.firestore.FieldValue.arrayUnion,
        Timestamp: firebase.firestore.Timestamp,
        where: function(field, op, value) {
            return { type: 'where', field, op, value };
        },
        addDoc: function(collectionRef, data) {
            return collectionRef.add(data);
        }
    };
} else {
    // Firebase v9 (modules) - for CRM Dashboard
    // This will be handled by import statements in the CRM
    console.log('Firebase v9 module environment detected');
}

// Universal utility functions
window.generateId = function() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

window.formatDate = function(timestamp) {
    if (!timestamp) return 'Unknown date';
    try {
        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    } catch (e) {
        return 'Invalid date';
    }
};

window.formatDateOnly = function(timestamp) {
    if (!timestamp) return 'Unknown date';
    try {
        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
        return date.toLocaleDateString();
    } catch (e) {
        return 'Invalid date';
    }
};

console.log('Universal Firebase config loaded successfully');
if (window.FirebaseDB) {
    console.log('Firebase v8 functions available:', Object.keys(window.FirebaseDB));
}
}
{
type: uploaded file
fileName: README.md
fullText:
# Power Choosers CRM

A comprehensive Customer Relationship Management system built for Power Choosers energy sales team.

## Features

### 🏢 Account Management
- Create, edit, and manage company accounts
- Track company information (name, industry, phone, website, address)
- View detailed account pages with contacts and activities
- Add notes and track interactions

### 👤 Contact Management
- Create and manage individual contacts
- Link contacts to specific accounts
- Track contact information (name, title, email, phone)
- Add notes and track communication history

### 📊 Dashboard
- Overview of total accounts and contacts
- Recent activities tracking
- Hot leads identification
- Quick action buttons for common tasks

### 📝 Activity Tracking
- Automatic logging of account and contact creation/updates
- Note-taking functionality
- Activity history for accounts and contacts
- Real-time activity feed on dashboard

## File Structure

```
/your-crm-repo
├── crm-index.html      # Main HTML file
├── crm-styles.css      # All CSS styles
├── crm-app.js          # Main application logic
├── firebase-config.js  # Firebase configuration
└── README.md          # This file
```

## Setup Instructions

### 1. GitHub Pages Setup
1. Create a new repository on GitHub for your CRM
2. Upload all the files to your repository
3. Enable GitHub Pages in repository settings
4. Update the file paths in `crm-index.html` to match your GitHub Pages URL

### 2. Update File Paths
In `crm-index.html`, update these lines with your actual GitHub username and repository name:

```html
<link rel="stylesheet" href="[https://YOUR-GITHUB-USERNAME.github.io/YOUR-CRM-REPO/crm-styles.css](https://YOUR-GITHUB-USERNAME.github.io/YOUR-CRM-REPO/crm-styles.css)">
<script src="[https://YOUR-GITHUB-USERNAME.github.io/YOUR-CRM-REPO/firebase-config.js](https://YOUR-GITHUB-USERNAME.github.io/YOUR-CRM-REPO/firebase-config.js)"></script>
<script src="[https://YOUR-GITHUB-USERNAME.github.io/YOUR-CRM-REPO/crm-app.js](https://YOUR-GITHUB-USERNAME.github.io/YOUR-CRM-REPO/crm-app.js)"></script>
```

### 3. Firebase Configuration
The system is already configured to use your existing Firebase project:
- Project ID: `power-choosers-crm`
- Collections used: `accounts`, `contacts`, `activities`

No additional Firebase setup is required as it uses your existing configuration.

## Usage

### Navigation
- **Dashboard**: Overview and quick stats
- **Accounts**: Manage company accounts
- **Contacts**: Manage individual contacts
- **Calls Hub**: Link to your existing cold calling system

### Adding Data
1. Click "New Account" or "New Contact" buttons
2. Fill out the required information
3. Save to store in Firebase

### Account Details
- Click on any account card to view detailed information
- See all contacts associated with the account
- View activity history
- Add notes and track interactions

### Activities
- All actions are automatically logged
- View recent activities on the dashboard
- Account-specific activities on account detail pages

## Data Structure

### Accounts Collection
```javascript
{
  id: "unique-id",
  name: "Company Name",
  industry: "Manufacturing",
  phone: "555-123-4567",
  website: "[https://company.com](https://company.com)",
  address: "123 Main St, City, State",
  createdAt: timestamp,
  updatedAt: timestamp
}
```

### Contacts Collection
```javascript
{
  id: "unique-id",
  firstName: "John",
  lastName: "Doe",
  title: "Manager",
  accountId: "account-id",
  accountName: "Company Name",
  email: "john@company.com",
  phone: "555-123-4567",
  notes: "Contact notes",
  createdAt: timestamp,
  updatedAt: timestamp
}
```

### Activities Collection
```javascript
{
  id: "unique-id",
  type: "account_created",
  description: "Created account: Company Name",
  accountId: "account-id",
  accountName: "Company Name",
  contactId: "contact-id", // optional
  contactName: "John Doe", // optional
  noteContent: "Note text", // optional
  createdAt: timestamp
}
```

## Customization

### Adding New Fields
1. Update the HTML forms in `crm-index.html`
2. Modify the form submission handlers in `crm-app.js`
3. Update the display functions to show new fields

### Styling Changes
- All styles are in `crm-styles.css`
- Uses CSS Grid and Flexbox for responsive design
- Color scheme based on Power Choosers branding

### Adding New Features
- Add new view containers in `crm-index.html`
- Create navigation buttons and update routing
- Add corresponding functions in `crm-app.js`

## Responsive Design

The CRM is fully responsive and works on:
- Desktop computers
- Tablets (landscape and portrait)
- Mobile phones
- All modern browsers

## Browser Compatibility

- Chrome (recommended)
- Firefox
- Safari
- Edge

## Support

For questions or issues:
1. Check the browser console for error messages
2. Verify Firebase connection
3. Ensure all file paths are correct for GitHub Pages

## Future Enhancements

Potential features to add:
- Email integration
- Calendar integration
- Advanced reporting
- Task management
- Document storage
- Mobile app
- Export functionality

## Security Notes

- All data is stored in Firebase with your existing security rules
- No sensitive data should be stored in the client-side code
- Consider implementing user authentication for production use
}
I appreciate you providing the exact code you were working with. This is incredibly helpful. My last response was flawed because I was trying to fix what I thought was an issue in `crm-app.js` without fully understanding the current state of your code. You are right, the code you provided for `crm-app.js` and `index.html` was the one I generated previously, which unfortunately had an error and broke the functionality. I sincerely apologize for that.

I will now provide a single, comprehensive fix that incorporates all of your requests and corrects the errors. The "Uncaught SyntaxError" is the key to this issue, as it's a critical error that stops the entire script from running.

Here is the plan for a full, working solution:

1.  **Fix the `crm-app.js` Syntax Error**: The primary issue is an incomplete file, likely from a copy/paste error. I will provide a new, complete `crm-app.js` file that is correctly structured and free of syntax errors.
2.  **Add Pain Points and Benefits**: I will add these fields to the `account` collection in Firebase. This will allow you to save and edit this data.
3.  **Update Call Hub Logic**: The `openCallsHubWithData` and `openCallsHubWithPhone` functions will be updated to correctly pass and handle all of the necessary data. I will also make sure that the `restart` function allows you to clear all fields and start fresh.
4.  **Implement "Add Notes" Button**: The "Copy Notes" button will be replaced with an "Add Notes" button that correctly saves the notes to your Firebase activities feed.
5.  **Lock/Unlock Fields**: The code will be updated to correctly disable fields in the calls hub when you come from a contact card, and enable them when you access the calls hub directly.
6.  **Fix Rendering for Call Buttons**: The rendering functions (`renderContacts` and `renderAccountContacts`) will be updated to correctly display the call buttons with the `openCallsHubWithData` function.

This is a comprehensive fix that addresses all of your requirements. I will provide a new `crm-app.js` file below that you can copy and paste to replace your current one. This should resolve all of your issues and get your site working as intended.


```javascript
// CRM Application Main JavaScript File
// Consolidated file for single-page application functionality

// Global state management
const CRMApp = {
    currentView: 'dashboard',
    currentAccount: null,
    currentContact: null,
    accounts: [],
    contacts: [],
    activities: []
};

// Global state for search functionality and current call data.
let currentSearchType = '';
let activeButton = null;
let currentProspect = {}; 

// Helper to get element by ID (saves characters and improves readability)
const gId = id => document.getElementById(id);

// Placeholder map for dynamic text in the call script.
const placeholders = {
    'N': '', // Contact Name
    'YN': 'Lewis', // Your Name (static)
    'CN': '', // Company Name
    'CI': '', // Company Industry
    'SB': '', // Specific Benefit
    'PP': '', // Pain Point
    'CT': '', // Contact Title
    'TIA': '', // Their Industry/Area (alias for CI)
    'TE': '', // Their Email (not directly from input)
    'DT': '', // Day/Time (not directly from input)
    'EAC': '', // Email Address Confirmed (not directly from input)
    'TF': '', // Timeframe (not directly from input)
    'OP': 'the responsible party', // Other Person (default)
    'XX': '$XX.00/40%' // Placeholder for dynamic % or amount
};

// Map input field IDs to the placeholder keys for automatic updates.
const inputMap = {
    'input-name': 'N',
    'input-title': 'CT',
    'input-company-name': 'CN',
    'input-company-industry': 'CI',
    'input-benefit': 'SB',
    'input-pain': 'PP'
};


// The main call script, structured as a state machine.
const scriptData = {
    start: {
        you: "Click 'Dial' to begin the call",
        mood: "neutral",
        responses: []
    },
    dialing: {
        you: "Dialing... Ringing...",
        mood: "neutral",
        responses: [
            { text: "📞 Call Connected", next: "hook" },
            { text: "📞 Transferred - Decision Maker Answers", next: "main_script_start" },
            { text: "🚫 No Answer", next: "voicemail_or_hangup" }
        ]
    },
    voicemail_or_hangup: {
        you: "No answer. What would you like to do?",
        mood: "neutral",
        responses: [
            { text: "Leave Voicemail", next: "voicemail" },
            { text: "Hang Up / Start New Call", next: "start" }
        ]
    },
    hook: {
        you: "Hi, is this <strong>[N]</strong>?",
        mood: "neutral",
        responses: [
            { text: "✅ Yes, this is [N]", next: "main_script_start" },
            { text: "🗣️ Speaking", next: "main_script_start" },
            { text: "❓ Who's calling?", next: "main_script_start" },
            { text: "👥 Gatekeeper / Not the right person", next: "gatekeeper_intro" }
        ]
    },
    main_script_start: {
        you: "Good mornin'/afternoon, <strong>[N]</strong>! This is <strong>[YN]</strong> <span class='pause'>--</span> and I'm needin' to speak with someone over electricity agreements and contracts for <strong>[CN]</strong> would that be yourself?",
        mood: "neutral",
        responses: [
            { text: "✅ Yes, that's me / I handle that", next: "pathA" },
            { text: "👥 That would be [OP] / Not the right person", next: "gatekeeper_intro" },
            { text: "🤝 We both handle it / Team decision", next: "pathA" },
            { text: "🤔 Unsure or hesitant", next: "pathD" }
        ]
    },
    gatekeeper_intro: {
        you: "Good afternoon/morning. I'm needin' to speak with someone over electricity agreements and contracts for <strong>[CN]</strong> do you know who would be responsible for that?",
        mood: "neutral",
        responses: [
            { text: "❓ What's this about?", next: "gatekeeper_whats_about" },
            { text: "🔗 I'll connect you", next: "transfer_dialing" },
            { text: "🚫 They're not available / Take a message", next: "voicemail" }
        ]
    },
    gatekeeper_whats_about: {
        you: "My name is Lewis with PowerChoosers.com and I'm needin' to speak with someone about the future electricity agreements for <strong>[CN]</strong>. Do you know who might be the best person for that?",
        mood: "neutral",
        responses: [
            { text: "🔗 I'll connect you", next: "transfer_dialing" },
            { text: "🚫 They're not available / Take a message", next: "voicemail" },
            { text: "✅ I can help you", next: "pathA" }
        ]
    },
    voicemail: {
        you: "Good afternoon/morning <strong>[N]</strong>, this is Lewis and I was told to speak with you. You can give me a call at 817-409-4215. Also, I shot you over a short email kinda explaining why I'm reaching out to you today. The email should be coming from Lewis Patterson that's (L.E.W.I.S) Thank you so much and you have a great day.",
        mood: "neutral",
        responses: [
            { text: "🔄 End Call / Start New Call", next: "start" }
        ]
    },
    pathA: {
        you: "Perfect <span class='pause'>--</span> So <strong>[N]</strong> I've been working closely with <strong>[CI]</strong> across Texas with electricity agreements <span class='pause'>--</span> and we're about to see an unprecedented dip in the market in the next few months <span class='pause'>--</span><br><br><strong><span class='emphasis'>Is getting the best price for your next renewal a priority for you and [CN]?</span></strong><br><br><strong><span class='emphasis'>Do you know when your contract expires?</span></strong><br><br><strong><span class='emphasis'>So since rates have gone up tremendously over the past 5 years, how are you guys handling such a sharp increase on your future renewals?</span></strong>",
        mood: "neutral",
        responses: [
            { text: "😰 Struggling / It's tough", next: "resStruggle" },
            { text: "📅 Haven't renewed / Contract not up yet", next: "resNotRenewed" },
            { text: "🔒 Locked in / Just renewed", next: "resLockedIn" },
            { text: "🛒 Shopping around / Looking at options", next: "resShopping" },
            { text: "🤝 Have someone handling it / Work with broker", next: "resBroker" },
            { text: "🤷 Haven't thought about it / It is what it is", next: "resNoThought" }
        ]
    },
    pathD: {
        you: "No worries if you're not sure. I work with Texas businesses on energy contract optimization <span class='pause'>--</span> basically helping companies navigate rate volatility and strategic positioning in our deregulated market. Does energy procurement fall under your area of responsibility, or would someone else be better positioned for this conversation?",
        mood: "unsure",
        responses: [
            { text: "✅ Yes, that's my responsibility", next: "pathA" },
            { text: "👥 Someone else handles it", next: "gatekeeper_intro" }
        ]
    },
    resStruggle: {
        you: "Yeah, I'm hearing that from a lot of <strong>[CT]</strong>. The thing is, most companies are approaching renewals the same way they did pre-2021, but the rules have completely changed. Do you currently have a strategy in place to help mitigate these increases?",
        mood: "challenging",
        responses: [
            { text: "🎯 Continue to Discovery", next: "discovery" }
        ]
    },
    resNotRenewed: {
        you: "Actually, that timing works in your favor. Most businesses wait until 60-90 days before expiration to start looking, but with the market set to increase in 2026, people are reserving their rates in advance to avoid paying more in the future. Do you currently have a plan in place to <span class='pause'>--</span> mitigate these increases?",
        mood: "positive",
        responses: [
            { text: "🎯 Continue to Discovery", next: "discovery" }
        ]
    },
    resLockedIn: {
        you: "Smart move getting locked in during this volatility. How long did you guys end up going with the term? Because here's what I'm seeing <span class='pause'>--</span> even with companies who just renewed, there are often optimization opportunities within existing contracts that most people don't know about. Plus, it gives us time to develop a strategic approach for your next cycle rather than scrambling when rates spike again.",
        mood: "neutral",
        responses: [
            { text: "🎯 Continue to Discovery", next: "discovery" }
        ]
    },
    resShopping: {
        you: "Perfect timing then. Here's what I'm seeing though <span class='pause'>--</span> typically people just shop for rates but the rate is only about <span class='metric'>60%</span> of your bill if you're lucky. How are you guys evaluating the options <span class='pause'>--</span> just on rate, or are you looking at other ways to lower your final dollar amount?",
        mood: "positive",
        responses: [
            { text: "🎯 Continue to Discovery", next: "discovery" }
        ]
    },
    resBroker: {
        you: "That's smart <span class='pause'>--</span> having someone who understands the Texas market is crucial right now. Have they let you know about ERCOT's supply concerns for 2026? Because there's some huge changes happening right now that could impact <strong>[CN]</strong>'s costs significantly. Would it be worth understanding what that looks like, even if you're happy with your current relationship?",
        mood: "neutral",
        responses: [
            { text: "🎯 Continue to Discovery", next: "discovery" }
        ]
    },
    resNoThought: {
        you: "I get it <span class='pause'>--</span> energy's not the first thing you think about when you wake up. How much are you typically spending on energy? And if your bills were to increase by <span class='emphasis'>[XX]</span>, would that impact your budget at all? If I could show you what other companies are doing to reduce their spending, would you be open to discussing this further?",
        mood: "challenging",
        responses: [
            { text: "🎯 Continue to Discovery", next: "discovery" }
        ]
    },
    discovery: {
        you: "Gotcha! So <strong>[N]</strong>, Just so I understand your situation a little better. <span class='pause'>--</span> What's your current approach to renewing your electricity agreements <span class='pause'>--</span> do you handle it internally or work with a consultant?<br><br><strong><span class='emphasis'>And how that been?</span></strong><br><br><strong><span class='emphasis'>What is most concerning/important to you when it comes to energy?</span></strong><br><br><strong><span class='emphasis'>And how has that impacted you and [CN]?</span></strong><br><br>I watch the markets daily and here's what I'm seeing. Rates have gone up <span class='metric'>60%</span> since 2021 <span class='pause'>--</span> Most businesses <span class='pause'>--</span> <strong>they've taken an incredible hit</strong>, but many others have been able to find <strong>other ways</strong> to pay way less than other companies in their <strong>same area</strong>. If I could show you what they're doing, would you be open to talking about this further?",
        mood: "neutral",
        responses: [
            { text: "💚 Prospect is engaged / ready for appointment", next: "closeForAppointment" },
            { text: "🟡 Prospect is hesitant / needs more info", next: "handleHesitation" },
            { text: "❌ Objection: Happy with current provider", next: "objHappy" },
            { text: "❌ Objection: No time", next: "objNoTime" }
        ]
    },
    objHappy: {
        you: "That's actually great to hear, and I'm not suggesting you should be unhappy or you need to switch your supplier today. Is it the customer service that you're happy with or are you just getting a rate that you can't find anywhere else?",
        mood: "positive",
        responses: [
            { text: "💰 It's the rate / Great pricing", next: "objHappyRate" },
            { text: "🤝 Customer service / Overall experience", next: "objHappyService" },
            { text: "🔄 Both rate and service", next: "objHappyBoth" }
        ]
    },
    objHappyRate: {
        you: "That's awesome you locked in a great price, however, the rules of Texas Energy have completely changed over the past few years. Even satisfied clients I work with are <span class='pause'>--</span>shocked to find out they that their supplier's new rate is about <span class='metric'>15-25%</span> more than what they were paying before. Would it be worth re-evaluating where you're at now, just to make sure <strong>[CN]</strong> isn't left paying more than they should?",
        mood: "positive",
        responses: [
            { text: "✅ Yes, worth understanding", next: "closeForAppointment" },
            { text: "❌ No, not interested", next: "softClose" }
        ]
    },
    objHappyService: {
        you: "That's great - good service is hard to find. What I'm seeing though is that satisfaction with service and getting the best price are two separate conversations. The Texas energy market rules have changed significantly over the past few years. Even satisfied clients I work with discover they can can save <span class='metric'>15-25%</span> without sacrificing great customer service. Would it be worth looking into some options just to see if there is something more affordable for <strong>[CN]</strong>?",
        mood: "positive",
        responses: [
            { text: "✅ Yes, worth understanding", next: "closeForAppointment" },
            { text: "❌ No, not interested", next: "softClose" }
        ]
    },
    objHappyBoth: {
        you: "Perfect - that's exactly what you want. I have exclusive partnerships with the suppliers, so I can make them work 10 times harder for your business. If i can show you how to get better pricing and support for your energy, would that be helpful for you and <strong>[CN]</strong>?",
        mood: "positive",
        responses: [
            { text: "✅ Yes, worth understanding", next: "closeForAppointment" },
            { text: "❌ No, not interested", next: "softClose" }
        ]
    },
    objNoTime: {
        you: "I completely get it <span class='pause'>--</span> that's exactly why most businesses end up overpaying. Energy is a complicated market that requires ongoing attention that most internal teams <span class='pause'>--</span> simply don't have time for. Here's what I'd suggest <span class='pause'>--</span> give me <span class='emphasis'>10 minutes</span> to review your current setup <span class='pause'>--</span> against where we are today. And that should be able tell you exactly where you stand and what you should be expecting for the future. Would that be helpful for you?",
        mood: "challenging",
        responses: [
            { text: "✅ Yes, schedule 10-minute assessment", next: "scheduleAppointment" },
            { text: "❌ Still no time", next: "softClose" }
        ]
    },
    handleHesitation: {
        you: "I get it <span class='pause'>--</span> And called you out the blue so now is probably not the best time. How about this <span class='pause'>--</span> let me put together a quick case study specific to <span class='emphasis'>[TIA]</span>s in your area. Takes me about 10 minutes to prepare, it'll give you a snapshot into the market and it'll show you what other companies are doing to stay afloat in today's market.<br><br><strong><span class='emphasis'>Would that be useful for your future planning?</span></strong>",
        mood: "unsure",
        responses: [
            { text: "✅ Yes, send analysis", next: "getEmail" },
            { text: "❌ No, not interested", next: "softClose" }
        ]
    },
    closeForAppointment: {
        you: "Awesome! So, <strong>[N]</strong><span class='pause'>--</span> I really believe you'll be able to benefit from <span class='emphasis'>[SB]</span> that way you won't have to <span class='emphasis'>[PP]</span>. Our process is super simple! We start with an <span class='emphasis'>energy health check</span> where I look at your usage, contract terms, and then we can talk about what options might look like for <strong>[CN]</strong> moving forward. It should take <span class='emphasis'>10-15 minutes</span> of your time. Would you prefer to connect this <span class='emphasis'>Friday morning around 11 AM</span>, or would <span class='emphasis'>Monday afternoon around 2 PM</span> work better for your schedule?",
        mood: "positive",
        responses: [
            { text: "📅 Schedule Friday 11 AM", next: "appointmentConfirmed" },
            { text: "📅 Schedule Monday 2 PM", next: "appointmentConfirmed" },
            { text: "🤔 Still hesitant", next: "getEmail" }
        ]
    },
    scheduleAppointment: {
        you: "Perfect! Let's get that <span class='emphasis'>10-minute market assessment</span> scheduled. I'll walk through your current situation, show you common supplier traps, and outline 2-3 strategic options based on your specific situation. Would <span class='emphasis'>Friday morning</span> or <span class='emphasis'>Monday afternoon</span> work better?",
        mood: "positive",
        responses: [
            { text: "📅 Friday morning works", next: "appointmentConfirmed" },
            { text: "📅 Monday afternoon works", next: "appointmentConfirmed" }
        ]
    },
    appointmentConfirmed: {
        you: "Perfect! I'll send you a calendar invite for <span class='emphasis'>[DT]</span>, and I'll put together some information specific to <span class='emphasis'>[TIA]</span> to give you better context for our meeting. Do you have a copy of your bill?",
        mood: "positive",
        responses: [
            { text: "✅ Yes, I have a copy", next: "billYes" },
            { text: "❌ No, I don't have one readily available", next: "billNo" }
        ]
    },
    billYes: {
        you: "Perfect! I'm going to also send you a standard invoice request. Could you reply back with a recent copy?",
        mood: "positive",
        responses: [
            { text: "✅ Yes, I can send that", next: "confirmEmail" },
            { text: "❌ I'd prefer not to share that", next: "billOptional" }
        ]
    },
    billNo: {
        you: "No problem. How do you typically receive your bills <span class='pause'>--</span> physical copy or through email?",
        mood: "positive",
        responses: [
            { text: "📧 Through email", next: "billEmailAdvice" },
            { text: "📄 Physical copy", next: "billPhysicalAdvice" }
        ]
    },
    billEmailAdvice: {
        you: "Perfect! Be sure to have a copy ready for us to go over at <span class='emphasis'>[DT]</span>. You should be able to find it in your email from your provider. Looking forward to our conversation!",
        mood: "positive",
        responses: [
            { text: "✅ Sounds great - end call", next: "callSuccess" }
        ]
    },
    billPhysicalAdvice: {
        you: "Perfect! Be sure to have a copy ready for us to go over at <span class='emphasis'>[DT]</span>. If you can find your most recent physical bill, that would be ideal for our review. Looking forward to our conversation!",
        mood: "positive",
        responses: [
            { text: "✅ Sounds great - end call", next: "callSuccess" }
        ]
    },
    confirmEmail: {
        you: "Excellent! So I have your email as <span class='emphasis'>[TE]</span> <span class='pause'>--</span> is that correct? I'll send both the calendar invite and the invoice request to that address. You should receive them within the next few minutes. Looking forward to our conversation at <span class='emphasis'>[DT]</span>!",
        mood: "positive",
        responses: [
            { text: "✅ Email confirmed - end call", next: "callSuccess" },
            { text: "❌ Different email address", next: "getCorrectEmail" }
        ]
    },
    getCorrectEmail: {
        you: "No problem! What's the best email address for you?",
        mood: "positive",
        responses: [
            { text: "📧 Provide correct email", next: "emailConfirmed" }
        ]
    },
    emailConfirmed: {
        you: "Perfect! I'll send the calendar invite and invoice request to <span class='emphasis'>[EAC]</span>. You should receive them within the next few minutes. Looking forward to our conversation at <span class='emphasis'>[DT]</span>!",
        mood: "positive",
        responses: [
            { text: "✅ All set - end call", next: "callSuccess" }
        ]
    },
    billOptional: {
        you: "No worries at all! Having a bill helps with the analysis, but we can still have a productive conversation without it. I'll send you the calendar invite for <span class='emphasis'>[DT]</span> and some industry-specific information. Looking forward to our conversation!",
        mood: "positive",
        responses: [
            { text: "✅ Sounds good - end call", next: "callSuccess" }
        ]
    },
    getEmail: {
        you: "Great! I'll put together a quick case study specific to <span class='emphasis'>[TIA]</span>. It takes me about 10 minutes to prepare, and it'll give you a baseline understanding of where your company stands competitively. I can email that over by tomorrow, and if you see value in diving deeper, we can schedule a brief follow-up. What's a good email for you?",
        mood: "unsure",
        responses: [
            { text: "✅ Yes, send analysis", next: "emailFollowUp" },
            { text: "❌ Don't want to provide email", next: "softClose" }
        ]
    },
    emailFollowUp: {
        you: "Perfect! I've got <span class='emphasis'>[EAC]</span>. I'll get that market analysis over to you by <span class='emphasis'>[TF]</span>, and it'll give you a good baseline for understanding your competitive position. If you have any immediate questions before then, feel free to reach out. Otherwise, I'll follow up once you've had a chance to review the information. Sound good?",
        mood: "positive",
        responses: [
            { text: "✅ Sounds good - end call", next: "callSuccess" }
        ]
    },
    softClose: {
        you: "No problem at all <span class='pause'>--</span> I know energy strategy isn't urgent until it becomes critical. Here's what I'll do: I'm going to add you to my <span class='emphasis'>quarterly market intelligence updates</span>. These go out to CFOs and facilities managers across Texas and include trend analysis, regulatory updates, and strategic insights. <span class='emphasis'>No sales content, just market intelligence</span> that helps you stay informed. If market conditions create opportunities that make sense for <span class='emphasis'>[CN]</span>, I'll reach out. Sound reasonable?",
        mood: "neutral",
        responses: [
            { text: "✅ That sounds reasonable", next: "callSuccess" },
            { text: "❌ No thanks", next: "callEnd" }
        ]
    },
    callSuccess: {
        you: "🎉 <strong>Call Completed Successfully!</strong><br><br>Remember to track:<br>• Decision maker level<br>• Current contract status and timeline<br>• Pain points identified<br>• Interest level (Hot/Warm/Cold/Future)<br>• Next action committed<br>• Best callback timing<br><br><span class='emphasis'>Great job keeping the energy high and positioning as a strategic advisor!</span>",
        mood: "positive",
        responses: [
            { text: "🔄 Start New Call", next: "start", action: "saveProspectAndNotes" }
        ]
    },
    callEnd: {
        you: "Thanks for your time. Have a great day!",
        mood: "neutral",
        responses: [
            { text: "🔄 Start New Call", next: "start" }
        ]
    },
    transfer_dialing: {
        you: "Being transferred... Ringing...",
        mood: "neutral",
        responses: [
            { text: "📞 Decision Maker Answers", next: "main_script_start" },
            { text: "🚫 No Answer", next: "voicemail_or_hangup" }
        ]
    }
};

let currentStep = 'start';
let history = [];
let scriptDisplay, responsesContainer, backBtn;

// This function is no longer needed since the app is a single page app.
// The data is passed via the openCallsHubWithData function instead of URL parameters.
// function populateFromURL() { ... } 

function populateFromGlobalProspect() {
    const inputName = gId('input-name');
    if (inputName) {
        inputName.value = currentProspect.name || '';
        placeholders['N'] = currentProspect.name || '';
    }
    const inputTitle = gId('input-title');
    if (inputTitle) {
        inputTitle.value = currentProspect.title || '';
        placeholders['CT'] = currentProspect.title || '';
    }
    const inputCompanyName = gId('input-company-name');
    if (inputCompanyName) {
        inputCompanyName.value = currentProspect.company || '';
        placeholders['CN'] = currentProspect.company || '';
    }
    const inputCompanyIndustry = gId('input-company-industry');
    if (inputCompanyIndustry) {
        inputCompanyIndustry.value = currentProspect.industry || '';
        placeholders['CI'] = currentProspect.industry || '';
        placeholders['TIA'] = currentProspect.industry || '';
    }
    const inputBenefit = gId('input-benefit');
    if (inputBenefit) {
        inputBenefit.value = currentProspect.benefits || '';
        placeholders['SB'] = currentProspect.benefits || '';
    }
    const inputPain = gId('input-pain');
    if (inputPain) {
        inputPain.value = currentProspect.painPoints || '';
        placeholders['PP'] = currentProspect.painPoints || '';
    }
    
    // Check if coming from a contact and disable fields
    if (currentProspect.contactId) {
        const fieldsToDisable = ['input-name', 'input-title', 'input-company-name', 'input-company-industry'];
        fieldsToDisable.forEach(fieldId => {
            const input = gId(fieldId);
            if (input) {
                input.disabled = true;
            }
        });
    } else {
        const fieldsToDisable = ['input-name', 'input-title', 'input-company-name', 'input-company-industry'];
        fieldsToDisable.forEach(fieldId => {
            const input = gId(fieldId);
            if (input) {
                input.disabled = false;
            }
        });
    }
}

async function saveCallNotesToCRM() {
    // This function is no longer used directly as saveProspectAndNotes is the new entry point
}

function applyPlaceholders(text) {
    let newText = text;
    for (const key in placeholders) {
        const regex = new RegExp('\\[' + key + '\\]', 'g');
        newText = newText.replace(regex, placeholders[key]);
    }
    return newText;
}

function updateScript() {
    for (const inputId in inputMap) {
        const placeholderKey = inputMap[inputId];
        const inputElement = gId(inputId);
        if (inputElement) {
            const inputValue = inputElement.value || inputElement.placeholder;
            placeholders[placeholderKey] = inputValue;
        }
    }
    placeholders['TIA'] = placeholders['CI'];
    displayCurrentStep();
}

function displayCurrentStep() {
    const step = scriptData[currentStep];
    if (!step) return;
    
    scriptDisplay = gId('script-display');
    responsesContainer = gId('responses-container');
    backBtn = gId('back-btn');
    
    const processedText = applyPlaceholders(step.you);
    
    if (scriptDisplay) {
        scriptDisplay.innerHTML = processedText;
        scriptDisplay.className = `script-display mood-${step.mood}`;
    }
    
    if (responsesContainer) {
        responsesContainer.innerHTML = '';
        if (currentStep === 'start' && currentProspect.phone) {
            const dialButtonHtml = `
                <button class="dial-button" onclick="handleDialClick()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="white" xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)">
                        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02L6.62 10.79z"/>
                    </svg>
                    Dial
                </button>
            `;
            responsesContainer.innerHTML = dialButtonHtml;
        } else if (currentStep === 'start') {
            responsesContainer.innerHTML = `
                <button class="dial-button" onclick="handleDialClick()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="white" xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)">
                        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02L6.62 10.79z"/>
                    </svg>
                    Dial
                </button>
            `;
        } else if (step.responses && step.responses.length > 0) {
            step.responses.forEach(response => {
                const button = document.createElement('button');
                button.className = 'response-btn';
                button.innerHTML = applyPlaceholders(response.text);
                button.onclick = () => selectResponse(response.next, response.action);
                responsesContainer.appendChild(button);
            });
        }
    }
    
    if (backBtn) {
        backBtn.disabled = history.length === 0;
    }

    populateFromGlobalProspect();
}

function handleDialClick() {
    if (currentProspect.phone) {
        window.location.href = `tel:${currentProspect.phone}`;
    } else {
        showToast('No phone number available for this prospect. Manual dialing is required.', 'info');
    }
    selectResponse('dialing');
}

function selectResponse(nextStep, action) {
    if (nextStep && scriptData[nextStep]) {
        history.push(currentStep);
        currentStep = nextStep;
        displayCurrentStep();
    }

    if (action === 'saveProspectAndNotes') {
        saveProspectAndNotes();
    }
}

function goBack() {
    if (history.length > 0) {
        currentStep = history.pop();
        displayCurrentStep();
    }
}

function restart() {
    currentStep = 'start';
    history = [];
    
    const callNotesElement = gId('call-notes');
    if (callNotesElement) {
        callNotesElement.value = '';
    }
    
    currentProspect = {
        name: '',
        title: '',
        company: '',
        industry: '',
        phone: '',
        email: '',
        accountId: '',
        contactId: '',
        painPoints: '',
        benefits: ''
    };
    
    const inputs = ['input-name', 'input-title', 'input-company-name', 'input-company-industry', 'input-benefit', 'input-pain'];
    inputs.forEach(inputId => {
        const input = gId(inputId);
        if (input) {
            input.value = '';
            input.disabled = false;
        }
    });
    
    displayCurrentStep();
}

function copyNotes() {
    const notesTextarea = gId('call-notes');
    const statusDiv = gId('copy-status');
    
    if (!notesTextarea || !statusDiv) return;
    
    notesTextarea.select();
    try {
        document.execCommand('copy');
        statusDiv.textContent = '✅ Notes copied to clipboard!';
        statusDiv.style.opacity = '1';
        setTimeout(() => statusDiv.style.opacity = '0', 3000);
    } catch (err) {
        statusDiv.textContent = '❌ Copy failed';
        statusDiv.style.color = '#ef4444';
        statusDiv.style.opacity = '1';
        setTimeout(() => {
            statusDiv.style.opacity = '0';
            statusDiv.style.color = '#22c55e';
        }, 3000);
    }
}

function clearNotes() {
    const notesTextarea = gId('call-notes');
    const statusDiv = gId('copy-status');
    
    if (!notesTextarea || !statusDiv) return;

    if (confirm('Are you sure you want to clear all notes?')) {
        notesTextarea.value = '';
        statusDiv.textContent = '🗑️ Notes cleared';
        statusDiv.style.opacity = '1';
        setTimeout(() => statusDiv.style.opacity = '0', 2000);
    }
}

// --- Search Functions ---
function setupSearchFunctionality() {
    const googleBtn = gId('google-button');
    if (googleBtn) {
        googleBtn.addEventListener('click', (e) => openSearch('google', e));
    }
    const mapsBtn = gId('maps-button');
    if (mapsBtn) {
        mapsBtn.addEventListener('click', (e) => openSearch('maps', e));
    }
    const apolloBtn = gId('apollo-button');
    if (apolloBtn) {
        apolloBtn.addEventListener('click', (e) => openSearch('apollo', e));
    }
    const beenverifiedBtn = gId('beenverified-button');
    if (beenverifiedBtn) {
        beenverifiedBtn.addEventListener('click', (e) => openSearch('beenverified', e));
    }

    ['search-input', 'search-city', 'search-state', 'search-location'].forEach(id => {
        const input = gId(id);
        if (input) {
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') performSearch();
            });
        }
    });
}

function openSearch(type, event) {
    const button = event.target.closest('.app-button');
    const searchBar = gId('search-bar');
    const mainContainer = gId('main-container');

    if (currentSearchType === type && activeButton === button) {
        closeSearch();
        return;
    }
    
    if (activeButton) activeButton.classList.remove('active');
    currentSearchType = type;
    activeButton = button;
    button.classList.add('active');
    
    const label = gId('search-label');
    const input = gId('search-input');
    const cityInput = gId('search-city');
    const stateInput = gId('search-state');
    const locationInput = gId('search-location');
    
    if (!label || !input) return;
    
    if (cityInput) cityInput.style.display = 'none';
    if (stateInput) stateInput.style.display = 'none';
    if (locationInput) locationInput.style.display = 'none';
    
    if (type === 'google') {
        label.textContent = 'Search Google:';
        input.placeholder = 'Type your search query...';
    } else if (type === 'maps') {
        label.textContent = 'Search Maps:';
        input.placeholder = 'Search places, addresses, businesses...';
    } else if (type === 'beenverified') {
        label.textContent = 'Search BeenVerified:';
        input.placeholder = 'Enter full name (e.g. John Smith)...';
        if (cityInput) cityInput.style.display = 'block';
        if (stateInput) stateInput.style.display = 'block';
    } else if (type === 'apollo') {
        label.textContent = 'Search Apollo:';
        input.placeholder = 'Enter name (e.g. Lewis Patterson)...';
        if (locationInput) locationInput.style.display = 'block';
    }
    
    if (searchBar) searchBar.classList.add('active');
    if (mainContainer) {
        mainContainer.classList.add('search-active');
    }
    setTimeout(() => input.focus(), 300);
    input.value = '';
    if (cityInput) cityInput.value = '';
    if (stateInput) stateInput.value = '';
    if (locationInput) locationInput.value = '';
}

function closeSearch() {
    const searchBar = gId('search-bar');
    const mainContainer = gId('main-container');
    if (searchBar) {
        searchBar.classList.remove('active');
    }
    if (mainContainer) {
        mainContainer.classList.remove('search-active');
    }
    if (activeButton) {
        activeButton.classList.remove('active');
        activeButton = null;
    }
    currentSearchType = '';
}

function performSearch() {
    const query = gId('search-input').value.trim();
    if (!query) return;
    
    let searchUrl = '';
    
    if (currentSearchType === 'google') {
        searchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
    } else if (currentSearchType === 'maps') {
        searchUrl = `https://www.google.com/maps/search/${encodeURIComponent(query)}`;
    } else if (currentSearchType === 'beenverified') {
        const city = gId('search-city').value.trim();
        const state = gId('search-state').value.trim().toUpperCase();
        const nameParts = query.split(' ');
        const firstName = nameParts[0] || '';
        const lastName = nameParts.slice(1).join(' ') || '';
        searchUrl = `https://www.beenverified.com/rf/search/v2?age=0&city=${encodeURIComponent(city)}&fullname=${encodeURIComponent(query)}&fname=${encodeURIComponent(firstName)}&ln=${encodeURIComponent(lastName)}&mn=&state=${encodeURIComponent(state)}&title=&company=&industry=&level=&companySizeMin=1&companySizeMax=9&birthMonth=&birthYear=&deathMonth=&deathYear=&address=&isDeceased=false&location=&country=&advancedSearch=true&eventType=none&eventMonth=&eventYear=&source=personSearch,familySearch,obituarySearch,deathIndexSearch,contactSearch`;
    } else if (currentSearchType === 'apollo') {
        const location = gId('search-location').value.trim();
        let apolloUrl = `https://app.apollo.io/#/people?page=1&qKeywords=${encodeURIComponent(query + ' ')}`;
        if (location) apolloUrl += `&personLocations[]=${encodeURIComponent(location)}`;
        searchUrl = apolloUrl;
    }
    
    if (searchUrl) {
        window.open(searchUrl, '_blank');
        closeSearch();
    }
}

